#include<iostream>
#include <cstring>

#include <cstdlib>
#include <stdio.h>
#include <unistd.h>
#include <stdio.h>
#include <unistd.h>
#include <fstream>
#include <sstream>
#include <stdlib.h>
#include <wchar.h>
#include <iconv.h>
#include <cmath>
#include <algorithm>
#include <vector>
#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <fstream>
#include <math.h>
#include <lz4.h>


using namespace std;
#define OUTLEN 19
int code_convert(char *from_charset,char *to_charset,char *inbuf,size_t inlen,char *outbuf,size_t outlen)
{
    iconv_t cd;
    int rc;
    char **pin = &inbuf;
    char **pout = &outbuf;
    cd = iconv_open(to_charset,from_charset);
    if (cd==0) return -1;
    memset(outbuf,0,outlen);
    if (iconv(cd ,pin, &inlen, pout, &outlen)==-1) return -1;
    // if (iconv(cd,pin,&inlen,pout,&outlen)==-1) return -1;
    iconv_close(cd);
    return 0;
}
int g2u(char *inbuf,size_t inlen,char *outbuf,size_t outlen)
{
return code_convert("gb2312","utf-8",inbuf,inlen,outbuf,outlen);
}
int u2g(char *inbuf,int inlen,char *outbuf,int outlen)
{
return code_convert("utf-8","gb2312",inbuf,inlen,outbuf,outlen);
}
void occMap2Mat(int8_t* data, int w, int h, cv::Mat& mat)
{
    mat = cv::Mat::zeros(h, w, CV_8UC1);
    for (int y = 0; y < h; y++)
    {
        for (int x = 0; x < w; x++)
        {
            // unknown region
            if (data[y*w+x] == -1)
            {
                mat.at<uint8_t>(h-y-1, x) = 200;
            }
            // clear region
            else if (data[y*w+x] == 0)
            {
                mat.at<uint8_t>(h-y-1, x) = 255;
            }
            // otherwise block region
        }
    }
}






// static int callback(void *data, int argc, char **argv, char **azColName)
// {
//    int i;
//    fprintf(stderr, "%s: ", (const char*)data);
//    for(i=0; i<argc; i++){
//       printf("%s = %s\n", azColName[i], argv[i] ? argv[i] : "NULL");
//    }
//    printf("\n");
//    return 0;
// }
// struct map_data1
// {
//     int id;
//     string name;
//     vector<int> data;
// }map_data;
// int main2(int argc, char* argv[])
// {
//    sqlite3 *db;
//    char *zErrMsg = 0;
//    int rc;
//    char *sql;
//    const char* data = "Callback function called";

//    /* Open database */
//    rc = sqlite3_open("/home/twc/sqlite3/test_map.db", &db);
//    if( rc ){
//       fprintf(stderr, "Can't open database: %s\n", sqlite3_errmsg(db));
//       exit(0);
//    }else{
//       fprintf(stderr, "Opened database successfully\n");
//    }

   
    
//     map_data.id = 1;
//     map_data.name = "客厅";
//     int tmp[5] = {1,2,3,4,5};
//     map_data.data.insert(map_data.data.begin(), tmp, tmp+5);
//     int arr[map_data.data.size()];
//     std::copy(map_data.data.begin(), map_data.data.end(), arr);



//    /* Create SQL statement */
//     // sql = "CREATE TABLE map_seg1("  \
//     //     "ID INT PRIMARY KEY     NOT NULL," \
//     //     "NAME           TEXT    NOT NULL," \
//     //     "AGE            INT     NOT NULL," \
//     //     "ADDRESS        CHAR(50)," \
//     //     "SALARY         REAL );";
//     // sql = "INSERT INTO map_seg1 (ID,NAME,AGE,ADDRESS,SALARY) "  \
//     // "VALUES (1, 'Paul', 32, 'California', 20000.00 ); " \
//     // "INSERT INTO map_seg1 (ID,NAME,AGE,ADDRESS,SALARY) "  \
//     // "VALUES (2, 'Allen', 25, 'Texas', 15000.00 );";
//         sql = "INSERT INTO map_seg (r_id,r_name,r_data) "  \
//     "VALUES (2, 'Allen', '{1,2,3}');";
//     // sql = "SELECT * from map_seg";
   
// //    char str[80];
// //    sprintf(str, "Pi 的值 = %d %s", map_data.id, "Str");
// //    puts(str);
//     // snprintf(sql, 1000, "INSERT INTO map_seg (r_id,r_name,r_data) VALUES (%d, %s, %s); ", map_data.id, map_data.name, map_data.name);
//     snprintf(sql, 1000, "insert into Student_Blob values(%d,%s,%s);", map_data.id, map_data.name, map_data.name);

//     cout<<sql<<endl;
//    /* Execute SQL statement */
//    rc = sqlite3_exec(db, sql, callback, (void*)data, &zErrMsg);
//    if( rc != SQLITE_OK ){
//       fprintf(stderr, "SQL error: %s\n", zErrMsg);
//       sqlite3_free(zErrMsg);
//    }else{
//       fprintf(stdout, "Operation done successfully\n");
//    }
//    sqlite3_close(db);
//    return 0;
// }

int main4()
{
    unsigned char i = 0;
    while(1)
    {
        printf("%d\n", i);
        i++;
    }
    return 0;
}

int main() 
{

    // int ret = system("sh ./ota.sh");
    
    // cout << "ret:" << ret<<endl;

    // cv::Mat picture1 = cv::imread("mapImg1.pgm",0);  //载入真实无损的原图像
	// // cv::imshow("[原图]",picture1);  
    // // cvtColor(picture1, picture1, CV_BGR2GRAY);
    // cout << "rols: "<< picture1.rows <<endl;
    // cout << "cols: "<< picture1.cols <<endl;
    // int x0 = 20;
    // int y0 = 10;
    // int x1 = 90;
    // int y1 = 77;
    // float a = float(y1 - y0) / float(x1 - x0);
    // float b = y0 - a * x0;
    // cout << a <<" " <<b<<endl;
	// // for (int i = 0; i < picture1.cols; i++)
	// // {
    // //     for(int j=0; j<picture1.rows; j++)
    // //     {
    // //         // cout << ((j * a + b)==i)<<endl;
    // //         if((j>x0)&(j<x1)&((j * a + b)==i))
    // //         {
    // //             cout << i <<" " <<j<<endl;
    // //             picture1.at<uint8_t>(j, i) = 0;    //画红线
    // //         }
            
    // //     }
	// // }
    // for (int i = x0; i<x1; i++)
    // {
        
    //     int y = i * a + b;
    //     cout << i <<" "<< y<<endl;
    //     picture1.at<uint8_t>(y, i) = 0;    //画红线
    // }
	// cv::imshow("[画直线]", picture1);
	// cv::waitKey(2000);


    // cv::Mat picture1 = cv::imread("mapImg1.pgm",0);  //载入真实无损的原图像
	// // cv::imshow("[原图]",picture1);  
    // // cvtColor(picture1, picture1, CV_BGR2GRAY);
    // cout << "rols: "<< picture1.rows <<endl;
    // cout << "cols: "<< picture1.cols <<endl;
	// for (int i = 0; i < picture1.cols; i++)
	// {
	// 	// picture1.at<cv::Vec3b>(50, i)[0] = 0;
	// 	// picture1.at<cv::Vec3b>(50, i)[1] = 0;
	// 	picture1.at<uint8_t>(30, i) = 0;    //画红线
	// }
	// cv::imshow("[画直线]", picture1);
	// cv::waitKey(2000);


// ++++++++++++++++++++++++++++++++++++++++++++
    // const char * src = "Hello World!";
    // int src_size = (int)strlen(src) + 1;
    // int max_dst_size = LZ4_compressBound(src_size);
    // char* dst = new char[max_dst_size];
    // int dst_size = LZ4_compress_default(src, dst, src_size, max_dst_size);
    // cout << dst<<endl;
    // int max_src_ex_size = dst_size * 4;
    // char* src_ex = new char[max_src_ex_size];
    // int src_ex_size = LZ4_decompress_safe(dst, src_ex, dst_size, max_src_ex_size);
    // cout<<src_ex<<endl;
    // delete[] dst;
    // dst = NULL;
    // delete[] src_ex;
    // src_ex = NULL;


// +++++++++++++++++++++++++++++++++++++++++++++
// 01 00 01 01 00 56 00 41 00 00 02 8a 00 05 00 00 02 8a 00 00 16 07 01 85 


// 1f 03 01 00 ff ff 21 1a 01 01 00 0f 41 02 0d 0a 2e 00 0f 02 00 06 1a 00 01 00 0b 28 00 0d 65 00 1a 01 2f 00 0f 02 00 23 0d 57 00 0f 56 00 32 0d 57 00 0f 56 00 ff ff 38 0c 59 02 0f 5a 02 32 0d 
// 55 00 0f 56 00 2a 04 b8 03 0c 5a 03 0f 06 03 29 0f 4e 00 01 04 02 00 0f 02 01 28 0e f9 00 04 02 00 0f 55 00 28 0d fd 03 06 02 00 0f 56 00 7e 0f 01 01 07 0f 03 02 29 0f 56 00 44 0f 57 00 07 0f
//  58 01 29 04 b0 02 06 a6 01 04 02 00 0f 56 00 2a 03 02 00 0e b4 00 0f 56 00 31 0e 63 02 0f 56 00 32 0d 57 00 0f 56 00 33 0c 57 00 0f 56 00 ff ff ff 4c 0f b7 05 29 06 02 00 0d b6 04 05 b3 03 02
// 2d 05 06 2a 00 0f 02 00 19 0e 56 00 02 4e 00 03 7c 05 05 64 00 0f 02 00 1b 0d 56 00 0a 02 00 0f 56 00 43 0f 67 01 21 05 e9 00 0f 02 00 07 0f ad 00 1c 0f 52 00 10 0f 77 09 20 0f 51 01 0c 04 02 
// 00 0f ac 00 1b 0f 55 00 14 0f 58 01 1c 0f 56 00 15 0f 57 00 1b 0f 56 00 37 04 e0 02 01 02 00 04 39 01 0f 02 00 0d 0f 59 01 07 01 47 00 0f 49 00 17 09 02 00 0f 56 00 01 02 50 00 09 27 00 0f 02 
// 00 1c 09 56 00 02 4f 00 0f 3e 01 16 0f 02 00 08 01 57 00 0f 4f 00 37 04 02 00 0f 3d 01 26 0f 02 00 ff ff a2 01 a5 07 a9 01 00 01 00 01 00 00 00 02 02 54 07 84 08 e5 a9 b4 e5 84 bf 03 15 00 50 
// 00 00 00 00 00


// 1f 03 01 00 ff ff 21 1a 01 01 00 0f 41 02 0d 0a 2e 00 0f 02 00 06 1a 00 01 00 0b 28 00 0d 65 00 1a 01 2f 00 0f 02 00 23 0d 57 00 0f 56 00 32 0d 57 00 0f 56 00 ff ff 38 0c 59 02 0f 5a 02 32 0d 
// 55 00 0f 56 00 2a 04 b8 03 0c 5a 03 0f 06 03 29 0f 4e 00 01 04 02 00 0f 02 01 28 0e f9 00 04 02 00 0f 55 00 28 0d fd 03 06 02 00 0f 56 00 7e 0f 01 01 07 0f 03 02 29 0f 56 00 44 0f 57 00 07 0f 
// 58 01 29 04 b0 02 06 a6 01 04 02 00 0f 56 00 2a 03 02 00 0e b4 00 0f 56 00 31 0e 63 02 0f 56 00 32 0d 57 00 0f 56 00 33 0c 57 00 0f 56 00 ff ff ff 4c 0f b7 05 29 06 02 00 0d b6 04 05 b3 03 02 
// 2d 05 06 2a 00 0f 02 00 19 0e 56 00 02 4e 00 03 14 0f 58 01 1c 0f 56 00 15 0f 57 00 1b 0f 56 00 37 04 e0 02 01 02 00 04 39 01 0f 02 00 0d 0f 59 01 07 01 47 00 0f 49 00 17 09 02 00 0f 56 00 01 
// 02 50 00 09 27 00 0f 02 00 1c 09 56 00 02 4f 00 0f 3e 01 16 0f 02 00 08 01 57 00 0f 4f 00 37 04 02 00 0f 3d 01 26 0f 02 00 ff ff a2 01 a5 07 a9 01 00 01 00 01 00 00 00 02 02 54 07 84 08 e6 88 
// bf e9 97 b4 03 15 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
// 00 00 00 00 00 13 00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 

// 1f 03 01 00 ff ff 21 1a 01 01 00 0f 41 02 0d 0a 2e 00 0f 02 00 06 1a 00 01 00 0b 28 00 0d 65 00 1a 01 2f 00 0f 02 00 23 0d 57 00 0f 56 00 32 0d 57 00 0f 56 00 ff ff 38 0c 59 02 0f 5a 02 32 0d 
// 55 00 0f 56 00 2a 04 b8 03 0c 5a 03 0f 06 03 29 0f 4e 00 01 04 02 00 0f 02 01 28 0e f9 00 04 02 00 0f 55 00 28 0d fd 03 06 02 00 0f 56 00 7e 0f 01 01 07 0f 03 02 29 0f 56 00 44 0f 57 00 07 0f 
// 58 01 29 04 b0 02 06 a6 01 04 02 00 0f 56 00 2a 03 02 00 0e b4 00 0f 56 00 31 0e 63 02 0f 56 00 32 0d 57 00 0f 56 00 33 0c 57 00 0f 56 00 ff ff ff 4c 0f b7 05 29 06 02 00 0d b6 04 05 b3 03 02 
// 2d 05 06 2a 00 0f 02 00 19 0e 56 00 02 4e 00 03 14 0f 58 01 1c 0f 56 00 15 0f 57 00 1b 0f 56 00 37 04 e0 02 01 02 00 04 39 01 0f 02 00 0d 0f 59 01 07 01 47 00 0f 49 00 17 09 02 00 0f 56 00 01 
// 02 50 00 09 27 00 0f 02 00 1c 09 56 00 02 4f 00 0f 3e 01 16 0f 02 00 08 01 57 00 0f 4f 00 37 04 02 00 0f 3d 01 26 0f 02 00 ff ff a2 01 a5 07 a9 01 00 01 00 01 00 00 00 02 02 54 07 84 08 e6 88 
// bf e9 97 b4 03 15 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
// 00 00 00 00 00

// 01 00 01 01 00 56 00 41 00 00 02 8a 00 05 00 00 
// 02 8a 00 00 16 07 01 85 1f 03 01 00 ff ff 21 1a 
// 01 01 00 0f 41 02 0d 0a 2e 00 0f 02 00 06 1a 00 
// 01 00 0b 28 00 0d 65 00 1a 01 2f 00 0f 02 00 23 
// 0d 57 00 0f 56 00 32 0d 57 00 0f 56 00 ff ff 38 
// 0c 59 02 0f 5a 02 32 0d 55 00 0f 56 00 2a 04 b8 
// 03 0c 5a 03 0f 06 03 29 0f 4e 00 01 04 02 00 0f 
// 02 01 28 0e f9 00 04 02 00 0f 55 00 28 0d fd 03 
// 06 02 00 0f 56 00 7e 0f 01 01 07 0f 03 02 29 0f 
// 56 00 44 0f 57 00 07 0f 58 01 29 04 b0 02 06 a6 
// 01 04 02 00 0f 56 00 2a 03 02 00 0e b4 00 0f 56 
// 00 31 0e 63 02 0f 56 00 32 0d 57 00 0f 56 00 33 
// 0c 57 00 0f 56 00 ff ff ff 4c 0f b7 05 29 06 02 
// 00 0d b6 04 05 b3 03 02 2d 05 06 2a 00 0f 02 00 
// 19 0e 56 00 02 4e 00 03 7c 05 05 64 00 0f 02 00 
// 1b 0d 56 00 0a 02 00 0f 56 00 43 0f 67 01 21 05 
// e9 00 0f 02 00 07 0f ad 00 1c 0f 52 00 10 0f 77 
// 09 20 0f 51 01 0c 04 02 00 0f ac 00 1b 0f 55 00 
// 14 0f 58 01 1c 0f 56 00 15 0f 57 00 1b 0f 56 00 
// 37 04 e0 02 01 02 00 04 39 01 0f 02 00 0d 0f 59 
// 01 07 01 47 00 0f 49 00 17 09 02 00 0f 56 00 01 
// 02 50 00 09 27 00 0f 02 00 1c 09 56 00 02 4f 00 
// 0f 3e 01 16 0f 02 00 08 01 57 00 0f 4f 00 37 04 
// 02 00 0f 3d 01 26 0f 02 00 ff ff a2 01 a5 07 a9 
// 01 00 01 00 01 00 00 00 02 02 54 07 84 08 e5 ae 
// a2 e5 8e 85 03 15 00 50 00 00 00 


// 0100 0101 0056 0041 0000 028a 0005 0000  .....V.A........
// 00000010: 028a 0000 1607 0185 1f03 0100 ffff 211a  ..............!.
// 00000020: 0101 000f 4102 0d0a 2e00 0f02 0006 1a00  ....A...........
// 00000030: 0100 0b28 000d 6500 1a01 2f00 0f02 0023  ...(..e.../....#
// 00000040: 0d57 000f 5600 320d 5700 0f56 00ff ff38  .W..V.2.W..V...8
// 00000050: 0c59 020f 5a02 320d 5500 0f56 002a 04b8  .Y..Z.2.U..V.*..
// 00000060: 030c 5a03 0f06 0329 0f4e 0001 0402 000f  ..Z....).N......
// 00000070: 0201 280e f900 0402 000f 5500 280d fd03  ..(.......U.(...
// 00000080: 0602 000f 5600 7e0f 0101 070f 0302 290f  ....V.~.......).
// 00000090: 5600 440f 5700 070f 5801 2904 b002 06a6  V.D.W...X.).....
// 000000a0: 0104 0200 0f56 002a 0302 000e b400 0f56  .....V.*.......V
// 000000b0: 0031 0e63 020f 5600 320d 5700 0f56 0033  .1.c..V.2.W..V.3
// 000000c0: 0c57 000f 5600 ffff ff4c 0fb7 0529 0602  .W..V....L...)..
// 000000d0: 000d b604 05b3 0302 2d05 062a 000f 0200  ........-..*....
// 000000e0: 190e 5600 024e 0003 0000 0000 0000 0000  ..V..N..........
// 000000f0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
// 00000100: 0000 0000 0000 0000 0000 0000 0000 0000  ................
// 00000110: 0000 0000 0000 0000 0000 0000 0000 0000  ................
// 00000120: 0000 0000 0000 0000 0000 0000 0000 0000  ................
// 00000130: 0000 0000 0000 0000 0000 0000 0000 0000  ................
// 00000140: 0000 0000 0000 0000 0000 0000 0000 0000  ................
// 00000150: 0000 0000 0000 0000 0000 0000 0000 0000  ................
// 00000160: 0000 0000 0000 0000 0000 0000 0000 0000



// 01 00 01 01 00 56 00 41 00 00 02 8a 00 05 00 00 
// 02 8a 00 00 16 07 01 85 1f 03 01 00 ff ff 21 1a 
// 01 01 00 0f 41 02 0d 0a 2e 00 0f 02 00 06 1a 00 
// 01 00 0b 28 00 0d 65 00 1a 01 2f 00 0f 02 00 23 
// 0d 57 00 0f 56 00 32 0d 57 00 0f 56 00 ff ff 38 
// 0c 59 02 0f 5a 02 32 0d 55 00 0f 56 00 2a 04 b8 
// 03 0c 5a 03 0f 06 03 29 0f 4e 00 01 04 02 00 0f 
// 02 01 28 0e f9 00 04 02 00 0f 55 00 28 0d fd 03 
// 06 02 00 0f 56 00 7e 0f 01 01 07 0f 03 02 29 0f 
// 56 00 44 0f 57 00 07 0f 58 01 29 04 b0 02 06 a6 
// 01 04 02 00 0f 56 00 2a 03 02 00 0e b4 00 0f 56 
// 00 31 0e 63 02 0f 56 00 32 0d 57 00 0f 56 00 33 
// 0c 57 00 0f 56 00 ff ff ff 4c 0f b7 05 29 06 02 
// 00 0d b6 04 05 b3 03 02 2d 05 06 2a 00 0f 02 00 
// 19 0e 56 00 02 4e 00 03 7c 05 05 64 00 0f 02 00 
// 1b 0d 56 00 0a 02 00 0f 56 00 43 0f 67 01 21 05 
// e9 00 0f 02 00 07 0f ad 00 1c 0f 52 00 10 0f 77 
// 09 20 0f 51 01 0c 04 02 00 0f ac 00 1b 0f 55 00 
// 14 0f 58 01 1c 0f 56 00 15 0f 57 00 1b 0f 56 00 
// 37 04 e0 02 01 02 00 04 39 01 0f 02 00 0d 0f 59 
// 01 07 01 47 00 0f 49 00 17 09 02 00 0f 56 00 01 
// 02 50 00 09 27 00 0f 02 00 1c 09 56 00 02 4f 00 
// 0f 3e 01 16 0f 02 00 08 01 57 00 0f 4f 00 37 04 
// 02 00 0f 3d 01 26 0f 02 00 ff ff a2 01 a5 07 a9 
// 01 00 01 00 01 00 00 00 02 02 54 07 84 08 e5 a9 
// b4 e5 84 bf 03 15 00 50 00 00 00 00 00 
    cout <<endl<<endl;
    unsigned char version;
    using namespace std;
    size_t read_len1, read_len2;
    unsigned char buffer_map[100000];
    // 
    // fstream file1("../../map_lz4", ios::in | ios::binary);
        fstream file1("../../.ros/1651374426-mm_map_1_07.bin", ios::in | ios::binary);

    if (!file1)
    {
        printf("%s", "open file1 error");
        return 1;
    }
    file1.seekg(0, std::ios::end);
    read_len1 = file1.tellg();
    cout << "read len: : "<< read_len1 <<endl;
    file1.seekg(0);
    file1.read(reinterpret_cast<char *>(buffer_map), read_len1);

    version = buffer_map[0];
    int map_width = buffer_map[4] *256 + buffer_map[5];
    int map_height = buffer_map[6] *256 + buffer_map[7];
    cout << "map_width: "<< map_width <<endl;
    printf("map_width: %x\n", map_width);
    int len = buffer_map[18]* pow(2,24) + buffer_map[19]* pow(2,16) + buffer_map[20]* pow(2,8) + buffer_map[21];
    cout << "len: "<< len <<endl;
    int lz4_len = buffer_map[22]* pow(2,8) + buffer_map[23];
    cout << "lz4_len: "<< lz4_len <<endl;

    int max_src_ex_size = lz4_len * 50;
    char* src_ex = new char[max_src_ex_size];
    int src_ex_size = LZ4_decompress_safe((const char*)&buffer_map[24 + 0], src_ex, lz4_len, max_src_ex_size);
    cout << "src_ex_size: "<< src_ex_size <<endl;

    vector<int8_t> pix;
    for (int i=0; i<map_width * map_height; i++)
    {
        if(src_ex[i]%4 == 0)
            pix.push_back(0);
        else
            pix.push_back(-1);
    }
    // cv::Mat mapImg1;
    // occMap2Mat(pix.data(), map_width, map_height, mapImg1);
	// cv::imshow("mapImg1", mapImg1);
    // cv::imwrite("mapImg1.pgm", mapImg1);
	// cv::waitKey(1000);


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++



    // int aaa = pow(2,4);
    // int aaa1 = aaa;
    // printf("map_width: 0x%x\n", aaa1);
    // cout << aaa1<<endl;
    cout << endl<<endl;




    // std::vector<int8_t> data(96 * 77,255);
	// cv::Mat mat;
    // int h = 77;
    // int w = 96;
    // mat = cv::Mat::zeros(h, w, CV_8UC1);
    // for (int y = 0; y < h; y++)
    // {
    //     for (int x = 0; x < w; x++)
    //     {
    //         // unknown region
    //         if (data[y*w+x] == -1)
    //         {
    //             mat.at<uint8_t>(h-y-1, x) = 200;
    //         }
    //         // clear region
    //         else if (data[y*w+x] == 0)
    //         {
    //             mat.at<uint8_t>(h-y-1, x) = 255;
    //         }
    //         // otherwise block region
    //     }
    // }
	// cv::imshow("mapImg", mat);
	// cv::waitKey(0);

    int a1[5] = {0, 3, 4};
    int *b1, *b2;
    b1 = std::max_element(a1, a1+5);
    b2 = std::min_element(a1, a1+5);
    cout << *b1 <<endl<< *b2 <<endl;
    int b3 = *b2;
    cout<<b3<<endl;


    string str1 = "str1";
    str1 += "str2";
    cout << str1<<endl;

    enum week {Sun=7, Mon=1, Tue, Wed, Thu, Fri, Sat};
    cout << Sat << endl;




    // char *a = "房间1";
    // cout<<strlen(a)<<endl;
    // char b = 2;
    // cout<<b<<endl;
    // cout <<sizeof(a)/sizeof(a[0])<<endl;
    // char *c = 0;
    // cout<<c<<endl;
        // uint8_t a = 0x0f;
    // printf("%x\n", a);
    // uint8_t a1 = a>>2;
    // printf("%x", a1);
    // char *a = "客厅";
    // char *buffer = (char*)malloc(7);
    // memcpy(buffer, a, 7);
    // cout<<buffer<<endl;
    // e5 ae a2 e5 8e 85 00 00 00 00 00 00 00 00 00 00 00 00 00

    // char *in_utf8 = "客厅是是";
    // // string in_utf8 = "客厅是是"
    // uint8_t *b = (uint8_t *)malloc(strlen(in_utf8));
    // cout<<"len in:"<<strlen(in_utf8)<<endl;
    // cout<<"len in:"<<sizeof(in_utf8)<<endl;
    // for(int i=0;i<strlen(in_utf8);i++) 
    // {
    //     printf("in: %x\n", in_utf8[i]);
    //     b[i] = in_utf8[i];
    // }
    // char a = 0xe5;
    // printf("a: %x", a);
    // cout << in_utf8<<endl;
    // cout <<b<<endl;
    // // char *in_gb2312 = "\xbe\xb2\xcc\xac\xc4\xa3\xca\xbd";
    // char * in_gb2312 = "\xe5\xae\xa2\xe5\x8e\x85\x00";
    // char out[OUTLEN];
    // int rec;
    // rec = g2u(in_gb2312,strlen(in_gb2312),out,OUTLEN);
    // printf("gb2312-->unicode out=%s \n",out);
    // rec = u2g(in_utf8,strlen(in_utf8),out,OUTLEN);
    // printf("unicode-->gb2312 out=%s\n",out);

    // int a1[10] = {1,2};
    // cout<<"a1: "<<sizeof(a1)<<endl;

    // int a_1 = 0;
    // int a100 = 0, a0 = 0, a_ = 0;
    // int a[] =  {
    // 0, 0, 0, 0, 0, 0, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 100, 100, 100, 100, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,1000};
    // for (int i=0; i<sizeof(a)/sizeof(a[0]); i++)
    // {
    //     if(a[i]==-1)
    //     {
    //         a_1 += 1;
    //     }
    //     else if(a[i]==100) {a100+=1;}
    //     else if(a[i]==0) {a0+=1;}
    //     else 
    //     {
    //         a_+=1;
    //         // break;
    //     }
    // }
    // cout<<"a0: "<<a0<<endl;
    // cout<<"a_1: "<<a_1<<endl;
    // cout<<"a100: "<<a100<<endl;
    // cout<<"a_: " <<a_<<endl;

    // char a1 = 0x00<<6;
    // char a2 = 0x00<<4;
    // char a3 = 0x01<<2;
    // char a4 = 0x00;
    // char a5;
    // a5 = a1 + a2 + a3 + a4;
    // printf("a5: %d\n", a3<<2);
    // printf("a5: %d\n", a5);
    // cout<<"5/4:"<<5/4<<endl;

    // char bu = 50;
    // // char bu = 0x32;
    // printf("bu %d\n", bu);
    // printf("bu %c\n", bu);
    // cout <<bu<<endl;


    // int a = 4234;
    // char num_arr[4];//
    // int num0 = a / 1000 ;//取千位上的数
    // int num1 = a / 100 % 10 ; //取百位上的数
    // int num2 = a / 10 % 10;//取十位上的数
    // int num3 = a % 10;//取个位上的数
    // num_arr[0] = num0+48;
    // num_arr[1] = num1+48;
    // num_arr[2] = num2+48;
    // num_arr[3] = num3+48;
    // printf("%c",num_arr[0]);
    // printf("%c",num_arr[1]);
    // printf("%c",num_arr[2]);
    // printf("%c\n",num_arr[3]);
    // int num = 1234;
    // char temp[7], str[7];
    // int i = 0, j = 0;
    // while(num)
    // { 
    //     temp[i++] = num%10 +'0';
    //     num = num/10;
    // }
    // while(i>=0)
    // { 
    //     str[j++] = temp[--i];
    // }
    // cout<<str<<endl;

    return 0; 
}
int main1() 
{
    string a = "asdfaaaaf";
    int b[] = {1,2,3};
    printf("%d\n", sizeof(b));
    std::cout << sizeof(b) << std::endl;

    // byte key[2];
    // key[0] = 48;
    // key[1] = 49;
    // char *p = new char[sizeof(key)];
    // memcpy(p, key, sizeof(key));
    // p[sizeof(key)] = 0;
    // string str(p);

    // byte* px = (byte*)str.c_str();
    // int len = str.length();
    cout<<"--------------"<<endl;
    char c1[3];
    //c = (char*)malloc(3);
    c1[0] = 0x10;
    c1[1] = 0x02;
    char d[] = "abcd";

    cout<<d[0]<<endl;
    // printf("%x", 'a');

    int buffer[] = {1,23,3};
    int aa = 1;
    cout<<"aaaaaaaaa"<<aa<<endl;
    int *buffer1[3] = {&aa, &aa};

    char *buffer2;
    buffer2 = "12345123123";
    char temp1[100];
    strcpy(temp1, buffer2);
    printf("sizeof(buffer): %d\n", sizeof(buffer));
    printf("sizeof(buffer): %d\n", sizeof(buffer1));


    printf("sizeof(buffer): %d\n", sizeof(buffer2));
    printf("sizeof(buffer): %d\n", strlen(buffer2));
    printf("sizeof(temp): %d\n", sizeof(temp1));

    unsigned short s = 257;

    // printf("s: %X\n", s);
    // cout<< hex;
    // cout<< "ssssssssss"<<s<<endl;
    
    // const std::string hex = "10";
    // std::stringstream ss;
    // unsigned char ch;
    // ss << hex[ch >> 4] << hex[ch & 0xf];
    // cout <<"ss.str "<<ss.str()<<endl;


    char m[100];
    int i = 20;
    for (int j=0;j<sizeof(int);j++)
    {
        m[j] = ((i>>(8*j))&0xff);
        // cout<<hex;
        cout<<((i>>(8*j))&0xff)<<endl;
    }
    

    cout<<"mmmmmmmmmmmm:  "<<m[0]<<endl;
    cout<<endl;
    cout<< "============="<<endl;

    string data = "59";
    string result;
    char c='\0';
    for (int i=0; i<8;i++)
    {
        if(data[i]=='1') c = (c<<1)|1;
        else c = c<<1;
        cout<<"c"<<c<<endl;
        result += (unsigned char)c;
        
    }
    cout<<result<<endl;

    char bu = 0x32;
    // char *bu1 = "a";
    printf("bu %d\n", bu);
    cout <<bu<<endl;

    char bu1 = '2';
    printf("%d\n", bu1);

    int a1 = 69;
    char s1[3];
    snprintf(s1, sizeof(s1), "%d", a1);

    cout<<"s1 "<<s1<<endl;

    return 1;
}
